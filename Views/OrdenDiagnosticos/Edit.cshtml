@model RepairHouse.Models.OrdenDiagnostico
@using RepairHouse.Models

@{
    ViewBag.Title = "Edit";
}

<h2>Editar Orden de Diagnostico</h2>

<div id="app">
    <form id="ordenFrm">
        <h5 class="bg-dark text-white p-2">Encabezado</h5>

        <div class="row">
            <div class="col">
                <label>Fecha emision:</label>
                <input v-model="OrdenEncabezado.FechaEmision" type="date" class="form-control" required disabled />
            </div>
            <div class="col-2">
                <label>Id empleado</label>
                <div class="input-group mb-3">
                    @*<div class="input-group-prepend" data-toggle="modal" data-target="#EmpleadosModal" v-on:click="searchEmpleado()">
                        <button class="input-group-text" type="button"><i class="fa fa-search"></i></button>
                    </div>*@
                    <input v-model="OrdenEncabezado.IdEmpleado" type="text" class="form-control app-readonly" required />
                </div>
            </div>
            <div class="col-4">
                <label>Nombre empleado</label>
                <div class="input-group mb-3">
                    <input v-model="OrdenEncabezado.NombreEmpleado" type="text" class="form-control" disabled />
                </div>
            </div>
            <div class="col">
                <label>Sucursal</label>
                <input v-model="OrdenEncabezado.IdSucursal" type="hidden" class="col-3" />
                <input v-model="OrdenEncabezado.NombreSucursal" type="text" class="form-control" disabled />
            </div>
        </div>

        <div class="row">
            <div class="col">
                <label>Fecha resolucion:</label>
                <input v-model="OrdenEncabezado.FechaResolucion" type="date" class="form-control" />
            </div>
            <div class="col-2">
                <label>Id cliente</label>
                <div class="input-group mb-3">
                    @*<div class="input-group-prepend" data-toggle="modal" data-target="#ClientesModal" v-on:click="searchCliente()">
                        <button class="input-group-text" type="button"><i class="fa fa-search"></i></button>
                    </div>*@
                    <input v-model="OrdenEncabezado.IdCliente" type="text" class="form-control app-readonly" required />
                </div>
            </div>
            <div class="col-4">
                <label>Nombre cliente</label>
                <div class="input-group mb-3">
                    <input v-model="OrdenEncabezado.NombreCliente" type="text" class="form-control" disabled />
                </div>
            </div>
            <div class="col">
                <label>DUI cliente</label>
                <input v-model="OrdenEncabezado.DUI" type="text" class="form-control" disabled />
            </div>
        </div>

        <div class="row">
            <div class="col">
                <label>Comentarios:</label>
                <textarea v-model="OrdenEncabezado.Comentarios" class="form-control"></textarea>
            </div>
        </div>

        <div class="row">
            @*<div class="col">
                <label>Facturado:</label>
                <input v-model="OrdenEncabezado.Facturado" type="text" class="form-control" disabled />
            </div>*@
            <div class="col">
                <label>Estado diagnóstico</label>
                <select v-model="OrdenEncabezado.IdEstado" type="text" class="form-control">
                    <option v-for="Estado in Estados" :value="Estado.IdEstado">{{Estado.Estado}}</option>
                </select>
            </div>
        </div>

        <br />

        <h5 class="bg-dark text-white p-2">Detalle</h5>

        <div class="row">
            <div class="col">
                <label>N. equipos:</label>
                <input v-model="OrdenEncabezado.CantidadEquipos" type="number" class="form-control" disabled />
            </div>
            <div class="col">
                <label>Precio:</label>
                <input v-model="OrdenEncabezado.PrecioBruto" type="number" class="form-control" disabled />
            </div>
            <div class="col">
                <label>Descuento %:</label>
                <input v-model="OrdenEncabezado.Descuento" type="number" class="form-control" min="0" maxlength="2" oninput="if(this.value.length > this.maxLength) this.value = this.value.slice(0, this.maxLength);" />
            </div>
            <div class="col">
                <label>Total:</label>
                <input v-model="OrdenEncabezado.PrecioNeto" type="number" class="form-control" disabled />
            </div>
        </div>

        <br />
        <div style="overflow-y: scroll; height:175px;">
            <table class="table">
                <thead>
                    <tr>
                        <th>Id equipo</th>
                        <th>Descripción</th>
                        <th>Precio diagnóstico</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <tr v-for="Detalle in OrdenDetalle">
                        <td>{{Detalle.IdEquipo}}</td>
                        <td>{{Detalle.Marca}} {{Detalle.Modelo}}</td>
                        <td>$ {{Detalle.Costo}}</td>
                        @*<td><button v-on:click="quitarEquipoEnDetalle(Detalle)" class="btn btn-warning">Quitar</button></td>*@
                        @*<td><button v-on:click="searchDiagnostico(Detalle)" type="button" class="btn btn-primary">Crear diagnóstico</button></td>*@
                    </tr>
                </tbody>
            </table>
        </div>

        <br />

        @*<button v-if="OrdenEncabezado.Facturado" type="button" class="btn btn-secondary" disabled>Facturar</button>*@
        @*<button v-else v-on:click="alert('FLOJO PARA FACTURACION')" type="button" class="btn btn-primary">Facturar</button><span> | </span>*@

        @*<a href="#" data-toggle="modal" data-target="#EquiposClienteModal" v-on:click="searchEquipos()" class="btn btn-primary">Buscar equipos del usuario</a><span> | </span>
        <a href="@Url.Action("Create", "Equipos")" target="_blank" class="btn btn-primary">Registrar nuevo equipo</a> <span> | </span>*@
        <button v-on:click="enviarFormulario()" type="button" v- class="btn btn-success">Editar orden</button>
    </form>

    <div class="modal fade bd-example-modal-lg" id="EmpleadosModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div>
                    <div class="modal-header">
                        <h5 class="modal-title">Empleados</h5>
                        <div class="col">
                            <div class="input-group mb-3">
                                <input v-model="NombreEmpleado" type="search" class="form-control">
                                <div class="input-group-append" v-on:click="searchEmpleado()">
                                    <span class="input-group-text" id="basic-addon2"><i class="fa fa-search"></i></span>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="modal-body" style="overflow-y: scroll; height:300px;">
                        <table class="table table-bordered table-dark table-striped">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Empleado</th>
                                    <th>Cargo</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="Empleado in Empleados">
                                    <td>{{Empleado.IdEmpleado}}</td>
                                    <td>{{Empleado.NombreEmpleado}}</td>
                                    <td>{{Empleado.Cargo}}</td>
                                    <td><button v-on:click="setEmpleadoEnEncabezado(Empleado)" class="btn btn-success" data-dismiss="modal"><i class="fa fa-check"></i></button></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade bd-example-modal-lg" id="ClientesModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div>
                    <div class="modal-header">
                        <h5 class="modal-title">Clientes</h5>
                        <div class="col">
                            <div class="input-group mb-3">
                                <input v-model="NombreCliente" type="search" class="form-control">
                                <div class="input-group-append" v-on:click="searchCliente()">
                                    <span class="input-group-text" id="basic-addon2"><i class="fa fa-search"></i></span>
                                </div>
                                <a href="@Url.Action("Create", "Clientes")" target="_blank" class="btn btn-primary ml-4">Registrar nuevo cliente</a>
                            </div>
                        </div>
                    </div>
                    <div class="modal-body" style="overflow-y: scroll; height:300px;">
                        <table class="table table-bordered table-dark table-striped">
                            <thead>
                                <tr>
                                    <th>Id</th>
                                    <th>Cliente</th>
                                    <th>DUI</th>
                                    <th>Municipio</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                <tr v-for="Cliente in Clientes">
                                    <td>{{Cliente.IdCliente}}</td>
                                    <td>{{Cliente.NombreCliente}}</td>
                                    <td>{{Cliente.DUI}}</td>
                                    <td>{{Cliente.Municipio}}</td>
                                    <td><button v-on:click="setClienteEnEncabezado(Cliente)" data-dismiss="modal" class="btn btn-success"><i class="fa fa-check"></i></button></td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade bd-example-modal-lg" id="EquiposClienteModal" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div v-if="OrdenEncabezado.IdCliente == null" class="modal-header">
                    <h5>Seleccione un cliente</h5>
                </div>
                <div v-else>
                    <div>
                        <div class="modal-header">
                            <h5 v-if="Equipos.length == 0" class="modal-title">El cliente no tiene equipos</h5>
                            <h5 v-else class="modal-title">Equipos del Cliente</h5>
                            <a href="@Url.Action("Create", "Equipos")" target="_blank" class="btn btn-primary">Registrar nuevo equipo</a>
                        </div>
                        <div class="modal-body">
                            <div class="modal-body" style="overflow-y: scroll; height:300px;">
                                <table class="table table-bordered table-dark table-striped">
                                    <thead>
                                        <tr>
                                            <th>Id</th>
                                            <th>Marca</th>
                                            <th>Modelo</th>
                                            <th>Precio dianóstico</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr v-for="Equipo in Equipos">
                                            <td>{{Equipo.IdEquipo}}</td>
                                            <td>{{Equipo.Marca}}</td>
                                            <td>{{Equipo.Modelo}}</td>
                                            <td>$ {{Equipo.Costo}}</td>
                                            <td><button v-on:click="agregarEquipoEnDetalle(Equipo)" data-dismiss="modal" class="btn btn-success"><i class="fa fa-check"></i></button></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
                </div>
            </div>
        </div>
    </div>

</div>

@{
    var ordenEncabezado = new
    {
        Model.IdOrdenDiagnostico,
        FechaEmision = @String.Format("{0:yyyy-MM-dd}", @Model.FechaEmision),
        Model.FechaResolucion,
        Model.Sucursal.IdSucursal,
        NombreSucursal = Model.Sucursal.Nombre,
        IdEmpleado = Model.Empleado.IdEmpleado,
        NombreEmpleado = (Model.Empleado.PrimerNombre + " " + Model.Empleado.SegundoNombre + " " + Model.Empleado.PrimerApellido + " " + Model.Empleado.SegundoApellido).Trim(),
        IdCliente = Model.Cliente.IdCliente,
        NombreCliente = (Model.Cliente.PrimerNombre + " " + Model.Cliente.SegundoNombre + " " + Model.Cliente.PrimerApellido + " " + Model.Cliente.SegundoApellido).Trim(),
        Model.Cliente.DUI,
        Model.Comentarios,
        Model.CantidadEquipos,
        Model.PrecioBruto,
        Model.Descuento,
        Model.PrecioNeto,
        Model.EstadoOrdenDiagnostico.IdEstado,
        Model.EstadoOrdenDiagnostico.Estado,
        Model.Facturado

    };

    List<Object> ordenDetalle = new List<object>();

    foreach (var item in Model.OrdenDiagnosticoDetalle)
    {
        ordenDetalle.Add(new
        {
            item.IdOrdenDiagnosticoDetalle,
            item.IdEquipo,
            item.Equipo.MarcaEquipo.Marca,
            item.Equipo.ModeloEquipo.Modelo,
            item.IdOrdenDiagnostico,
            item.IdInventario,
            item.Costo
        });
    };

    casa_reparadoraEntities db = new casa_reparadoraEntities();
    var estados = db.EstadoOrdenDiagnostico.Select(x => new { x.IdEstado, x.Estado });
}

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var OrdenEncabezado = JSON.parse('@Html.Raw(Json.Encode(ordenEncabezado))');
        console.log(OrdenEncabezado);

        var OrdenDetalle = JSON.parse('@Html.Raw(Json.Encode(ordenDetalle))');
        console.log(OrdenDetalle);

        var Estados = JSON.parse('@Html.Raw(Json.Encode(estados))');
        console.log(Estados);

        var app = new Vue({
            el: '#app',
            data: {
                OrdenEncabezado,
                OrdenDetalle,
                Empleados: [],
                NombreEmpleado: this.OrdenEncabezado.NombreEmpleado,
                Clientes: [],
                NombreCliente: this.OrdenEncabezado.NombreCliente,
                Equipos: [],
                Estados
            },
            watch: {
                OrdenDetalle: {
                    // cada vez que se agrega o quita un equipo recalculamos el encabezado
                    handler() {
                        this.recalcularEncabezado();
                    },
                    deep: true
                },
                'OrdenEncabezado.Descuento': function (newVal, oldVal) {
                    // cada vez que se modifica el descuento recalculamos el encabezado
                    this.recalcularEncabezado();
                },
                'OrdenEncabezado.IdCliente': function (newVal, oldVal) {
                    // cada vez que se cambia de cliente limpiamos el detalle (por consecuencia se disparan otros watch)
                    this.OrdenDetalle = [];
                },
                'NombreEmpleado': function (newVal, oldVal) {
                     // para buscar empleados mientras escribe
                   this.searchEmpleado();
                },
                'NombreCliente': function (newVal, oldVal) {
                    // para buscar clientes mientras escribe
                    this.searchCliente();
                }
            },
            methods: {
                searchEmpleado() {
                    // buscamos empleados
                    var nombreEmpleado = this.NombreEmpleado;
                    var nombreSucursal = this.OrdenEncabezado.NombreSucursal;

                    var params = "nombreEmpleado=" + nombreEmpleado + "&nombreSucursal=" + nombreSucursal;
                    var url = '@Url.Content("~/Empleados/Search?")' + params;

                    axios.get(url).then((result) => {
                        var { data } = result;

                        this.Empleados = [];
                        data.forEach((e) => {
                            var item = new Object();
                            item.IdEmpleado = e.IdEmpleado;
                            item.NombreEmpleado = e.NombreEmpleado;
                            item.Cargo = e.Cargo.Descripcion;

                            this.Empleados.push(item);
                        })
                    }).catch((error) => {
                        alert("Ha ocurrido un error");
                    });
                },
                setEmpleadoEnEncabezado(empleado) {
                    // set empleado en el form encabezado
                    this.OrdenEncabezado.IdEmpleado = empleado.IdEmpleado;
                    this.OrdenEncabezado.NombreEmpleado = empleado.NombreEmpleado;
                },
                searchCliente() {
                    // buscamos el cliente
                    var nombreCliente = this.NombreCliente;

                    var url = '@Url.Content("~/Clientes/Search?nombreCliente=")' + nombreCliente;

                    axios.get(url).then((result) => {
                        var { data } = result;

                        this.Clientes = [];
                        data.forEach((e) => {
                            var item = new Object();
                            item.IdCliente = e.IdCliente;
                            item.NombreCliente = e.NombreCliente;
                            item.DUI = e.DUI;
                            item.Municipio = e.Municipio.Municipio;

                            this.Clientes.push(item);
                        })
                    }).catch((error) => {
                        alert("Ha ocurrido un error");
                    });
                },
                setClienteEnEncabezado(cliente) {
                    // set cliente en el form encabezado
                    this.OrdenEncabezado.IdCliente = cliente.IdCliente;
                    this.OrdenEncabezado.NombreCliente = cliente.NombreCliente;
                    this.OrdenEncabezado.DUI = cliente.DUI;
                },
                searchEquipos() {
                    // buscamos los equipos
                    if (this.OrdenEncabezado.IdCliente == null) {
                        return;
                    }

                    var idCliente = this.OrdenEncabezado.IdCliente;
                    var url = '@Url.Content("~/Equipos/Search?idCliente=")' + idCliente;

                    axios.get(url).then((result) => {
                        var { data } = result;
                        this.Equipos = [];
                        data.forEach((e) => {
                            var item = new Object();
                            item.IdEquipo = e.IdEquipo;
                            item.Marca = e.Marca.Marca;
                            item.Modelo = e.Modelo.Modelo;
                            item.IdInventario = e.Tipo.Inventario.IdInventario;
                            item.Costo = e.Tipo.Inventario.TotalUnitario;

                            this.Equipos.push(item);
                        })
                    }).catch((error) => {
                        alert("Ha ocurrido un error");
                    });
                },
                agregarEquipoEnDetalle(Equipo) {
                    // agregamos un equpo al detalle
                    var result = this.OrdenDetalle.filter(e => e.IdEquipo == Equipo.IdEquipo);
                    if (result != 0) {
                        alert("Este equipo ya ha sido agregado");
                        return;
                    }

                    this.OrdenDetalle.push(Equipo);
                },
                quitarEquipoEnDetalle(Equipo) {
                    // sacamos un equpo del detalle
                    this.OrdenDetalle = this.OrdenDetalle.filter(e => e.IdEquipo != Equipo.IdEquipo);
                },
                recalcularEncabezado() {
                    // recalculamos informacion de encabezado
                    var nEquipos = this.OrdenDetalle.length;
                    var sumaCostoDiagnosticos = 0;

                    this.OrdenDetalle.forEach(e => {
                        sumaCostoDiagnosticos += e.Costo;
                    })

                    var sumaCostoTotal = sumaCostoDiagnosticos - (sumaCostoDiagnosticos * this.OrdenEncabezado.Descuento * 0.01);

                    this.OrdenEncabezado.CantidadEquipos = nEquipos;
                    this.OrdenEncabezado.PrecioBruto = sumaCostoDiagnosticos;
                    this.OrdenEncabezado.PrecioNeto = sumaCostoTotal;
                },
                searchDiagnostico(Detalle) {
                    alert('FLUJO PARA DIAGNOSTICO')
                    console.log(Detalle);

                    var idOrdenDiagnostico = Detalle.IdOrdenDiagnostico;
                    var idEquipo = Detalle.IdEquipo;

                    var params = "?idOrdenDiagnostico=" + idOrdenDiagnostico + "&idEquipo=" + idEquipo;

                    var url = '@Url.Content("~/Diagnosticos/Search")' + params;

                    console.log(url);

                    axios.get(url).then((result) => {
                        var { data } = result;

                        console.log(data);
                        return;
                        if (data != null) {
                            location.href = '@Url.Content("~/OrdenDiagnosticos/Edit")';
                        } else {
                            location.href = '@Url.Content("~/OrdenDiagnosticos/Create")';
                        }                        
                    }).catch((error) => {
                        alert("Ha ocurrido un error");
                    });
                },
                enviarFormulario() {
                    var statusForm = document.getElementById('ordenFrm').reportValidity();

                    if (!statusForm) {
                        return;
                    }

                    if (this.OrdenDetalle == null || this.OrdenDetalle.length == 0) {
                        alert("Ingrese al menos un equipo en el detalle");
                        return;
                    }

                    var url = '@Url.Content("~/OrdenDiagnosticos/Edit")';

                    var OrdenDiagnostico = { ...this.OrdenEncabezado };
                    OrdenDiagnostico.OrdenDiagnosticoDetalle = this.OrdenDetalle;

                    axios.post(url, OrdenDiagnostico).then((result) => {
                        location.href = '@Url.Content("~/OrdenDiagnosticos/Index")';
                    }).catch((error) => {
                        alert("Ha ocurrido un error");
                    });
                }
            }
        })
    </script>
}